<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Secret Message</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
body {
    background-color: #121212;
    color: #e0e0e0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.container {
    background: #1f1f1f;
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: 0 0 20px rgba(0,0,0,0.5);
}

h2 {
    color: #66d9ef;
    text-shadow: 0 0 5px #66d9ef;
}

.text-muted {
    color: #aaa !important;
}

.message-paragraph {
    transform: translateY(20px);
    transition: opacity 0.8s ease, transform 0.8s ease;
    color: #f0f0f0;
    line-height: 1.6em;
    margin-bottom: 1em;
}
.message-paragraph.visible {
    opacity: 1;
    transform: translateY(0);
}

#message-container::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
}
.form-control, .form-control:focus {
    background-color: #2a2a2a;
    border: 1px solid #66d9ef;
    color: #f0f0f0;
    border-radius: 0.5rem;
    box-shadow: none;

}
.form-control::placeholder {
    color: #ffffff;  /* White placeholder text */
    opacity: 1;      /* Ensure full opacity */
}



input{
    color:white;
}
.btn-primary {
    background-color: #66d9ef;
    border: none;
    color: #121212;
    font-weight: bold;
    border-radius: 0.5rem;
    transition: 0.3s;
}

.btn-primary:hover {
    background-color: #4db8d6;
    color: #fff;
}

.alert-success {
    background-color: #1b3b1b;
    color: #66d9ef;
    border: 1px solid #66d9ef;
}
#message-container {
    max-height: 400px; 
    overflow-y: auto;   /* vertical scroll if needed */
    overflow-x: hidden; /* prevent horizontal scroll */
    word-wrap: break-word; /* wrap long lines */
}

</style>
</head>
<body>

<% if (success && success.length >0 ) { %>
<div class="alert alert-success alert-dismissible fade show" role="alert">
    <%= success %>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>
<% } %>

<div class="container py-5 my-5">
    <div class="text-center mb-4">
        <h2 class="fw-bold">üîê TOP SECRET</h2>
        <p class="text-muted">Scroll carefully to reveal</p>
    </div>
    
    <div id="message-container" style="max-height: 400px; overflow-y: auto; overflow-x: hidden; word-wrap: break-word;">
        <!-- Example secret message -->
        <p class="message-paragraph">
    Writing clean code is not just about making your program work; it is about creating code that is readable, maintainable, and scalable. Consistent naming conventions, clear function structures, and proper indentation make it easier for others‚Äîand even yourself in the future‚Äîto understand your work. Always aim for simplicity rather than cleverness, because overly complex code increases the risk of bugs. Documenting your code through meaningful comments and README files also helps your team collaborate efficiently. In addition, following coding standards, using linters, and refactoring regularly are essential practices. Remember, code is read far more often than it is written. Making it understandable saves time, reduces errors, and enhances team productivity. Clean code improves debugging, testing, and future modifications. Using modular approaches, separating concerns, and writing reusable functions make your software robust. Finally, never underestimate the power of readability; it is the hallmark of a professional developer.
</p>

<p class="message-paragraph">
    Debugging is one of the most critical skills for a programmer. It requires patience, logical thinking, and a methodical approach to identify problems in your code. Start by reproducing the error consistently, then analyze logs and error messages carefully. Using debugging tools, breakpoints, and console outputs can help trace the root cause of issues. Sometimes, the problem is not where it appears; understanding dependencies and data flow is crucial. Writing unit tests before debugging can also help narrow down the source of errors. Effective debugging is also about learning from mistakes; each bug provides insight into your code and how it interacts with the environment. Avoid making random changes to fix a problem; instead, apply systematic reasoning. Collaboration can also help, as another set of eyes may notice something you overlooked. Over time, debugging becomes faster, more efficient, and even enjoyable as you develop mastery over your codebase.
</p>

<p class="message-paragraph">
    Version control is a cornerstone of modern software development. Tools like Git allow developers to track changes, collaborate with teams, and revert to previous states of a project if needed. Understanding branching strategies, commit conventions, and pull requests ensures smoother teamwork and reduces conflicts. Each commit should be meaningful and descriptive to provide context to others. Regularly pushing your code to remote repositories also safeguards your work against local failures. Beyond collaboration, version control encourages experimentation; you can try new features on separate branches without fear of breaking the main code. Reviewing diffs, resolving merge conflicts carefully, and documenting changes are part of responsible version control practices. Continuous integration combined with version control further automates testing and deployment. Learning these tools early improves code reliability and developer confidence. Embracing version control is a mark of professionalism and efficiency in software engineering.
</p>

<p class="message-paragraph">
    Testing your software is essential to ensure it behaves as intended under various conditions. Unit testing focuses on individual functions or modules, while integration testing verifies that multiple components work together correctly. Writing tests for edge cases, error handling, and unexpected inputs can prevent critical failures in production. Automated testing frameworks, such as Jest, PyTest, or JUnit, make running tests easier and more consistent. Continuous integration systems can automatically run tests whenever code changes, catching issues before they affect users. Writing tests might seem time-consuming initially, but it saves significant effort in debugging later. Tests also serve as documentation for how the code should behave, helping new developers understand the project faster. Refactoring code without breaking functionality becomes safer with a strong test suite. Adopting test-driven development (TDD) can improve design and reliability. Ultimately, testing increases software quality, user satisfaction, and developer confidence.
</p>

<p class="message-paragraph">
    Learning algorithms and data structures is fundamental for solving problems efficiently. Understanding the strengths and limitations of different data structures‚Äîlike arrays, linked lists, trees, and graphs‚Äîallows you to select the best one for a task. Algorithms, including sorting, searching, and graph traversal, optimize performance and reduce resource usage. Analyzing time and space complexity ensures that your code scales well with increasing input size. Solving coding challenges and competitive programming problems sharpens these skills. Algorithms also form the backbone of real-world applications, from databases to AI systems. Properly chosen data structures and algorithms make your software faster and more reliable. Constant practice and studying problem-solving patterns improve your analytical thinking. Document your algorithm choices for future maintainers. Mastery in this area makes you a stronger, more versatile developer capable of handling complex challenges.
</p>

<p class="message-paragraph">
    Learning multiple programming languages broadens your perspective and increases your adaptability. Each language has unique paradigms, syntax, and ecosystems that teach different approaches to problem-solving. For instance, Python emphasizes readability and rapid development, while C++ provides control over memory and performance. JavaScript enables interactive web development, whereas Java supports enterprise-scale applications. Understanding these differences helps you choose the right tool for the right task. Exposure to different languages also makes learning new languages faster. Combining language skills with frameworks and libraries further enhances productivity. Being multilingual in programming encourages best practices, design patterns, and creative solutions. It also improves job prospects and opens doors to diverse projects. Ultimately, language diversity fosters innovation and a deeper understanding of programming concepts.
</p>

<p class="message-paragraph">
    Continuous learning is essential in the fast-paced world of technology. New frameworks, libraries, and tools are released regularly, and staying updated ensures you write efficient and modern code. Reading official documentation, following tech blogs, and contributing to open-source projects are effective ways to learn. Online courses, tutorials, and coding challenges help reinforce concepts and improve problem-solving skills. Engaging with developer communities allows you to exchange ideas, seek guidance, and discover best practices. Practicing new skills on personal projects consolidates your understanding. Embracing a growth mindset and curiosity ensures you remain adaptable. Learning also includes soft skills like communication and collaboration, which are critical for team success. A commitment to continuous learning makes you a better developer and future-proofs your career.
</p>

<p class="message-paragraph">
    Writing efficient code is not only about speed; it‚Äôs about optimizing readability, maintainability, and performance simultaneously. Avoid unnecessary computations, redundant loops, and excessive memory usage. Profile your code to identify bottlenecks and optimize critical sections. Use built-in libraries and functions whenever possible, as they are usually well-tested and optimized. Refactor code regularly to simplify complex logic and remove duplication. Understanding the underlying principles of your programming language helps you write better algorithms and utilize resources effectively. Efficient code reduces bugs, improves scalability, and provides a better user experience. Comment and document optimization decisions for future maintainers. Balance efficiency with clarity; overly optimized code that‚Äôs unreadable can be worse than slightly slower clean code. The goal is sustainable performance that supports long-term software health.
</p>

<p class="message-paragraph">
    Collaboration is a key part of modern software development. Working with others requires clear communication, empathy, and the ability to understand different perspectives. Code reviews allow teams to maintain quality, share knowledge, and catch errors early. Pair programming can improve code design and foster learning. Tools like Slack, Jira, and Trello help coordinate tasks and track progress. Writing clear documentation ensures that teammates understand your work and can contribute effectively. Respecting deadlines, providing constructive feedback, and supporting team members build a healthy development culture. Learning from peers accelerates personal growth. Collaboration skills often determine the success of complex projects. Effective teamwork is as valuable as technical expertise in delivering high-quality software.
</p>

<p class="message-paragraph">
    Security should be a top priority in all software projects. Protecting user data, validating input, and handling authentication properly prevents vulnerabilities and attacks. Understanding common threats like SQL injection, cross-site scripting (XSS), and data breaches is essential. Implement encryption for sensitive information and follow best practices for password storage and data transfer. Regularly updating libraries and dependencies reduces the risk of known exploits. Writing secure code also involves performing code reviews and security audits. Educating yourself on security standards, compliance regulations, and safe programming practices ensures reliability. Security is not an afterthought but an integral part of the development process. A secure application builds user trust and safeguards the reputation of your software. Integrating security from the start saves time, money, and potential disasters later.
</p>


        <div class="row mb-4 justify-content-center">
    <div class="col-12 col-sm-10 col-md-8 col-lg-6">
        <form id="feedback-form" action="/user/message" method="post" class="mt-4">
            <div class="mb-3">
                <label for="email" class="form-label fw-semibold">Your Email <span class="text-danger">*</span></label>
                <input 
                    type="email" 
                    class="form-control form-control-lg" 
                    id="email" 
                    name="email" 
                    placeholder="Enter your Email" 
                    required
                >
            </div>
    
            <div class="mb-3">
                <label for="feedback" class="form-label">Your Feedback</label>
                <textarea class="form-control" id="feedback" rows="4" placeholder="Write your feedback here" name="message" required></textarea>
            </div>
    
            <button type="submit" class="btn btn-primary w-100">Send Message</button>
        </form>
    </div>
</div>

</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script>
</script>
</body>
</html>
