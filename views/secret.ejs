<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Secret Message </title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">

<style>
body {
    background: linear-gradient(135deg, #f8cdda, #1d2b64);
    color: #fdfdfd; /* bright text */
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    padding: 2rem 1rem;
}

.container {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 1.2rem;
    padding: 2.5rem;
    box-shadow: 0 0 25px rgba(0,0,0,0.3);
    max-width: 900px;
    margin: auto;
    backdrop-filter: blur(8px);
}

h2 {
    color: #fff; /* brighter heading */
    text-shadow: 0 0 10px #ff80bf;
    text-align: center;
    margin-bottom: 1rem;
}

.text-muted {
    color: #ffd9f0 !important; /* visible light pink */
    text-align: center;
}

.message-paragraph {
    transform: translateY(20px);
    transition: opacity 0.8s ease, transform 0.8s ease;
    color: #fefefe; /* bright paragraphs */
    line-height: 1.6em;
    margin-bottom: 1.5em;
    word-wrap: break-word;
}

.message-paragraph.visible {
    opacity: 1;
    transform: translateY(0);
}

/* Typewriter effect */
#typewriter {
    color: #fefefe; /* neon pink for contrast */
    border-right: 2px solid #ff80bf;
    padding: 6px 12px;
    display: inline-block;
    overflow: hidden;
    font-family: 'Courier New', monospace;
    font-size: 1rem;
    white-space: nowrap;
    background-color: rgba(255,255,255,0.1);
    border-radius: 6px;
    transition: all 0.2s;
}

/* Feedback form styling */
.form-control, .form-control:focus {
    background-color: rgba(255,255,255,0.1);
    border: 1px solid #ff80bf;
    color: #fff;
    border-radius: 0.6rem;
    box-shadow: none;
}
.form-control::placeholder {
    color: #ffe1f8;
    opacity: 1;
}
.btn-primary {
    background-color: #ff80bf;
    border: none;
    color: #1d2b64;
    font-weight: bold;
    border-radius: 0.6rem;
    transition: 0.3s;
}
.btn-primary:hover {
    background-color: #ff57a1;
    color: #fff;
}

.exclamation {
    color: #ffd700; /* bright yellow for warning */
    display: block;
    text-align: center;
    margin-bottom: 0.5rem;
}
</style>
</head>
<body>

<div class="container">
    <h2 class="fw-bold">A secret code</h2>
    <p class="text-muted mb-4">Scroll carefully to reveal</p>

    <p class="message-paragraph visible">Variables are like containers that store data values in programming.</p>
    <p class="message-paragraph visible">Functions help us organize code into reusable blocks.</p>
    <p class="message-paragraph visible">Loops allow tasks to repeat without writing the same code again and again.</p>
    <p class="message-paragraph">Conditional statements like <code>if-else</code> control the flow of logic in a program.</p>
    <p class="message-paragraph">Databases store information so applications can access and update data easily.</p>

    <div class="mb-4 mt-4 text-center">
        <span class="exclamation"><i class="bi bi-exclamation-triangle-fill"></i> .</span>
        <button id="start-btn" class="btn btn-primary btn-sm">Show Secret Message</button>
    </div>

    <p style="width: auto; height:15px" class="mb-4 mt-2 message-paragraph visible">
        <span id="typewriter"></span>
    </p>

    <p class="message-paragraph">HTML provides the structure of a webpage using elements like headings, paragraphs, and links.</p>
    <p class="message-paragraph">CSS adds design, colors, and layouts to make websites visually attractive.</p>
    <p class="message-paragraph">JavaScript makes websites interactive with dynamic behavior and animations.</p>
    <p class="message-paragraph">Python is known for simplicity and is widely used in web development, AI, and automation.</p>
    <p class="message-paragraph">Git helps developers track changes in code and collaborate with others efficiently.</p>
</div>

    
    <div class="mb-4 mt-4 text-center">
        <span class="exclamation"><i class="bi bi-exclamation-triangle-fill"></i> <span>
        <span class="exclamation"><i class="bi bi-exclamation-triangle-fill"></i></span>

    <div class="row mb-4 justify-content-center">
        <div class="col-12 col-sm-10 col-md-8 col-lg-6">
            <form id="feedback-form" action="/user/message" method="post" class="mt-4">
                <div class="mb-3">
                    <label for="email" class="form-label fw-semibold">Your Email <span class="text-danger">*</span></label>
                    <input type="email" class="form-control form-control-lg" id="email" name="email" placeholder="Enter your Email" required>
                </div>
        
                <div class="mb-3">
                    <label for="feedback" class="form-label">Your Feedback</label>
                    <textarea class="form-control" id="feedback" rows="4" placeholder="Write your Message here" name="message" required></textarea>
                </div>
        
                <button type="submit" class="btn btn-primary w-100">Send Message</button>
            </form>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script>
const message = " This project is made up of Node.js";
const typingSpeed = 100;
const eraseDelay = 300;
const finalEraseSpeed = 80;
const startEraseAfter = 13;

const typewriterEl = document.getElementById("typewriter");
const startBtn = document.getElementById("start-btn");

startBtn.addEventListener("click", () => {
    startBtn.style.display = "none"; 
    startTypewriter();
});

function startTypewriter() {
    let i = 0;
    let startErasing = false;

    function typeEffect() {
        typewriterEl.textContent += message.charAt(i);
        i++;

        const typedWords = typewriterEl.textContent.trim().split(/\s+/).length;
        if (typedWords >= startEraseAfter) startErasing = true;

        if (startErasing && typewriterEl.textContent.length > 0) {
            setTimeout(() => {
                typewriterEl.textContent = typewriterEl.textContent.substring(1);
            }, eraseDelay);
        }

        if (i < message.length) {
            setTimeout(typeEffect, typingSpeed);
        } else {
            setTimeout(fullErase, 2000);
        }
    }

    function fullErase() {
        if (typewriterEl.textContent.length > 0) {
            typewriterEl.textContent = typewriterEl.textContent.substring(1);
            setTimeout(fullErase, finalEraseSpeed);
        } else {
            startBtn.style.display = "inline-block"; 
        }
    }

    typeEffect();
}
</script>

</body>
</html>
